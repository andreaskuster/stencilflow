{
	"inputs": {
		"a": {
			"data": "stencils/data/zeros_512x512x512_fp32.dat",
			"data_type": "float32"
		}
	},
	"outputs": ["q"],
	"dimensions": [512, 512, 512],
	"program": {
		"b": {
			"computation_string": "res = 0.16666666 * (a[i-1,j,k] + a[i+1,j,k] + a[i,j-1,k] + a[i,j+1,k] + a[i,j,k-1] + a[i,j,k+1])",
			"boundary_condition": {
				"a": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"c": {
			"computation_string": "res = 0.16666666 * (b[i-1,j,k] + b[i+1,j,k] + b[i,j-1,k] + b[i,j+1,k] + b[i,j,k-1] + b[i,j,k+1])",
			"boundary_condition": {
				"b": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"d": {
			"computation_string": "res = 0.16666666 * (c[i-1,j,k] + c[i+1,j,k] + c[i,j-1,k] + c[i,j+1,k] + c[i,j,k-1] + c[i,j,k+1])",
			"boundary_condition": {
				"c": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"e": {
			"computation_string": "res = 0.16666666 * (d[i-1,j,k] + d[i+1,j,k] + d[i,j-1,k] + d[i,j+1,k] + d[i,j,k-1] + d[i,j,k+1])",
			"boundary_condition": {
				"d": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"f": {
			"computation_string": "res = 0.16666666 * (e[i-1,j,k] + e[i+1,j,k] + e[i,j-1,k] + e[i,j+1,k] + e[i,j,k-1] + e[i,j,k+1])",
			"boundary_condition": {
				"e": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"g": {
			"computation_string": "res = 0.16666666 * (f[i-1,j,k] + f[i+1,j,k] + f[i,j-1,k] + f[i,j+1,k] + f[i,j,k-1] + f[i,j,k+1])",
			"boundary_condition": {
				"f": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"h": {
			"computation_string": "res = 0.16666666 * (g[i-1,j,k] + g[i+1,j,k] + g[i,j-1,k] + g[i,j+1,k] + g[i,j,k-1] + g[i,j,k+1])",
			"boundary_condition": {
				"g": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"i": {
			"computation_string": "res = 0.16666666 * (h[i-1,j,k] + h[i+1,j,k] + h[i,j-1,k] + h[i,j+1,k] + h[i,j,k-1] + h[i,j,k+1])",
			"boundary_condition": {
				"h": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"j": {
			"computation_string": "res = 0.16666666 * (i[i-1,j,k] + i[i+1,j,k] + i[i,j-1,k] + i[i,j+1,k] + i[i,j,k-1] + i[i,j,k+1])",
			"boundary_condition": {
				"i": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"k": {
			"computation_string": "res = 0.16666666 * (j[i-1,j,k] + j[i+1,j,k] + j[i,j-1,k] + j[i,j+1,k] + j[i,j,k-1] + j[i,j,k+1])",
			"boundary_condition": {
				"j": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"l": {
			"computation_string": "res = 0.16666666 * (k[i-1,j,k] + k[i+1,j,k] + k[i,j-1,k] + k[i,j+1,k] + k[i,j,k-1] + k[i,j,k+1])",
			"boundary_condition": {
				"k": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"m": {
			"computation_string": "res = 0.16666666 * (l[i-1,j,k] + l[i+1,j,k] + l[i,j-1,k] + l[i,j+1,k] + l[i,j,k-1] + l[i,j,k+1])",
			"boundary_condition": {
				"l": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"n": {
			"computation_string": "res = 0.16666666 * (m[i-1,j,k] + m[i+1,j,k] + m[i,j-1,k] + m[i,j+1,k] + m[i,j,k-1] + m[i,j,k+1])",
			"boundary_condition": {
				"m": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"o": {
			"computation_string": "res = 0.16666666 * (n[i-1,j,k] + n[i+1,j,k] + n[i,j-1,k] + n[i,j+1,k] + n[i,j,k-1] + n[i,j,k+1])",
			"boundary_condition": {
				"n": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"p": {
			"computation_string": "res = 0.16666666 * (o[i-1,j,k] + o[i+1,j,k] + o[i,j-1,k] + o[i,j+1,k] + o[i,j,k-1] + o[i,j,k+1])",
			"boundary_condition": {
				"o": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		},
		"q": {
			"computation_string": "res = 0.16666666 * (p[i-1,j,k] + p[i+1,j,k] + p[i,j-1,k] + p[i,j+1,k] + p[i,j,k-1] + p[i,j,k+1])",
			"boundary_condition": {
				"p": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float32"
		}
	}
}
