{
	"inputs": {
		"inA": {
            "data": [19.30100000000000000e+00, 
                     19.43700000000000000e+00,
                     19.30100000000000000e+00, 
                     19.03700000000000000e+00, 
                     19.36400000000000000e+00, 
                     19.31100000000000000e+00, 
                     19.93600000000000000e+00, 
                     20.10300000000000000e+00, 
                     20.24600000000000000e+00, 
                     20.03800000000000000e+00, 
                     20.36800000000000000e+00, 
                     20.03900000000000000e+00, 
                     20.24700000000000000e+00, 
                     20.03400000000000000e+00, 
                     20.10300000000000000e+00, 
                     20.56400000000000000e+00, 
                     20.94800000000000000e+00, 
                     19.19300000000000000e+00, 
                     19.36700000000000000e+00, 
                     19.98700000000000000e+00, 
                     20.43200000000000000e+00, 
                     20.95200000000000000e+00, 
                     21.34400000000000000e+00, 
                     21.07300000000000000e+00],
			"data_type": "float64"
		},
		"inB": {
			"data": "inB.csv",
			"data_type": "float64"
		},
		"inC": {
			"data": "inC.dat",
			"data_type": "float32"
		}
	},
	"outputs": ["kernelB"],
	"dimensions": [2, 3, 4],
	"program": {
		"kernelA": {
			"computation_string": "out = 3.14 * (inB[i,j,k]-inB[i,j-1,k]);res = (inA[i,j,k] + out) * cos(out);",
			"boundary_condition": {
				"inA": {
					"type": "constant",
					"value": 1.0
				},
				"inB": {
					"type": "constant",
					"value": 7.5
				}
			},
			"data_type": "float64"
		},
		"kernelB": {
			"computation_string": "res = kernelA[i,j,k] + inC[i,j,k];",
			"boundary_condition": {
				"kernelA": {
					"type": "copy"
				},
				"inC": {
					"type": "copy"
				}
			},
			"data_type": "float64"
		}
	}
}
