{
	"inputs": {
		"inA": {
			"data": [1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00, 1.000000000000000000e+00],
			"data_type": "float64"
		},
		"inB": {
			"data": "inB.csv",
			"data_type": "float64"
		},
		"inC": {
			"data": "inC.dat",
			"data_type": "float64"
		}
	},
	"outputs": ["res2"],
	"dimensions": [4, 4, 4],
	"program": {
		"res1": {
			"computation_string": "out = 3.14 * (inB[i,j,k]-inB[i,j-1,k]);res = (inA[i,j,k] + out) * cos(out);",
			"boundary_conditions": {
				"inA": {
					"type": "constant",
					"value": 1.0
				},
				"inB": {
					"type": "constant",
					"value": 7.5
				}
			},
			"data_type": "float64"
		},
		"res2": {
			"computation_string": "res = res1[i,j,k] + inC[i,j,k];",
			"boundary_conditions": {
				"res1": {
					"type": "copy"
				},
				"inC": {
					"type": "copy"
				}
			},
			"data_type": "float64"
		}
	}
}
