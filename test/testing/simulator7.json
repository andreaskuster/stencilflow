{
	"inputs": {
		"arrA": {
			"data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
			"data_type": "float64"
		},
		"arrB": {
			"data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
			"data_type": "float64"
		},
        "arrC": {
			"data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
			"data_type": "float64"
		}
	},
	"outputs": ["res"],
	"dimensions": [3, 3],
	"program": {
		"kernelA": {
			"computation_string": "res = arrA[j,k] + arrA[j,k] + arrB[j,k-1] + arrB[j,k] + arrB[j+1,k+1]",
			"boundary_conditions": {
				"arrA": {
					"type": "constant",
					"value": 0.0
				},
				"arrB": {
					"type": "constant",
					"value": 1.0
				}
			},
			"data_type": "float64"
		},
		"kernelB": {
			"computation_string": "res = arrA[j,k] if arrA[j,k] > 0.0 else (kernelA[j,k] + kernelA[j,k+1] + kernelA[j,k+2] + kernelA[j+1,k] + kernelA[j+1,k+1] + kernelA[j,k-1] + kernelA[j-1,k])",
			"boundary_conditions": {
				"arrA": {
					"type": "constant",
					"value": 0.0
				},
              	"kernelA": {
					"type": "constant",
					"value": 0.0
				}
			},
			"data_type": "float64"
		},
		"kernelC": {
			"computation_string": "res = arrC[j,k] + (2.25 * kernelB[j,k]) + kernelB[j+1,k] + kernelB[j+1,k] + kernelB[j+1,k+1] + kernelB[j+1,k]",
			"boundary_conditions": {
				"arrC": {
					"type": "constant",
					"value": 0.0
				},
              	"kernelB": {
					"type": "constant",
					"value": 0.0
				}
			},
			"data_type": "float64"
		},
        "kernelD": {
			"computation_string": "res = kernelA[j,k] + kernelB[j,k]",
			"boundary_conditions": {
				"kernelA": {
					"type": "constant",
					"value": 0.0
				},
              	"kernelB": {
					"type": "constant",
					"value": 0.0
				}
			},
			"data_type": "float64"
		},
		"kernelE": {
			"computation_string": "res = kernelD[j,k] + arrB[j,k]",
			"boundary_conditions": {
				"arrB": {
					"type": "constant",
					"value": 0.0
				},
              	"kernelD": {
					"type": "constant",
					"value": 0.0
				}
			},
			"data_type": "float64"
		},
		"res": {
			"computation_string": "res = kernelC[j,k] + kernelD[j,k] + kernelE[j,k]",
			"boundary_conditions": {
				"kernelC": {
					"type": "constant",
					"value": 0.0
				},
				"kernelD": {
					"type": "constant",
					"value": 0.0
				},
				"kernelE": {
					"type": "constant",
					"value": 0.0
				}
			},
			"data_type": "float64"
		}
	}
}
